{"version":3,"sources":["axios.ts","useIntersectionObserver.ts","ImageBox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["instance","axios","create","baseURL","headers","Authorization","process","PEXELS_API_KEY","useIntersectionObserver","observer","useRef","useState","node","setNode","useEffect","current","IntersectionObserver","entries","server","forEach","entry","isIntersecting","source","target","getAttribute","setAttribute","unobserve","threshold","observe","disconnect","ImageBox","photo","className","ref","src","alt","url","data-src","tiny","href","photographer_url","rel","photographer","reducer","state","action","type","isLoading","photos","isErr","App","useReducer","dispatch","get","then","res","data","catch","err","console","error","map","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oQAUA,IAKeA,E,OALEC,EAAMC,OAAO,CAC1BC,QAAS,4BACTC,QAAS,CAAEC,cARAC,mHAAYC,kBC6BZC,EA/BiB,WAC5B,IAAMC,EAAWC,mBADiB,EAEVC,mBAAsB,MAFZ,mBAE3BC,EAF2B,KAErBC,EAFqB,KA4BlC,OAxBAC,qBAAU,WAqBN,OApBAL,EAASM,QAAU,IAAIC,sBACnB,SAACC,EAASC,GACND,EAAQE,SAAQ,SAACC,GACb,GAAIA,EAAMC,eAAgB,CACtB,IAAMC,EAASF,EAAMG,OAAOC,aAAa,YACzCJ,EAAMG,OAAOE,aAAa,MAAOH,GACjCb,EAASM,QAAQW,UAAUd,SAIvC,CACIe,UAAW,CAAC,IAAM,GAAK,IAAM,KAKjCf,GACAH,EAASM,QAAQa,QAAQhB,GAGtB,kBAAMH,EAASM,QAAQc,gBAC/B,CAACjB,IAEGC,GCIIiB,EA3B2B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrClB,EAAUL,IAEhB,OACE,yBAAKwB,UAAU,kBACb,yBACEA,UAAU,SACVC,IAAKpB,EACLqB,IAAI,sCACJC,IAAKJ,EAAMK,IACXC,WAAUN,EAAMG,IAAII,OAEtB,uBAAGN,UAAU,4BAAb,qCACqC,IACnC,uBACEO,KAAMR,EAAMS,iBACZC,IAAI,+BACJlB,OAAO,SACPS,UAAU,qCAETD,EAAMW,iBCfXC,EAAU,SAACC,EAAcC,GAC7B,OAAQA,EAAOC,MACb,IAAK,UACH,OAAO,eACFF,EADL,CAEEG,WAAW,EACXC,OAAQH,EAAOG,SAGnB,IAAK,UACH,OAAO,eACFJ,EADL,CAEEG,WAAW,EACXE,OAAO,IAGX,QACE,OAAOL,IAmEEM,MAhDf,WAAgB,IAAD,EACaC,qBAAWR,EAAS,CAC5CI,WAAW,EACXE,OAAO,IAHI,mBACNL,EADM,KACCQ,EADD,KAsBb,OAhBAtC,qBAAU,WACRb,EACGoD,IAAoB,kCACpBC,MAAK,SAACC,GACLH,EAAS,CAAEN,KAAM,UAAWE,OAAQO,EAAIC,KAAKR,YAE9CS,OAAM,SAACC,GACNC,QAAQC,MAAM,gBAAiBF,GAE/BN,EAAS,CAAEN,KAAM,iBAEpB,IAMD,yBAAKd,UAAU,yBACb,4BAAQA,UAAU,+DAChB,wBAAIA,UAAU,+CAAd,0DAGA,uBACEA,UAAU,sBACVO,KAAK,yDACLE,IAAI,+BACJlB,OAAO,UAJT,WASF,8BACGqB,EAAMG,UACL,uBAAGf,UAAU,eAAb,eAEA,yBAAKA,UAAU,0BArBrBY,EAAMI,OAAOa,KAAI,SAAC9B,GAAD,OAAW,kBAAC,EAAD,CAAU+B,IAAK/B,EAAMgC,GAAIhC,MAAOA,WCxD5CiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMmB,c","file":"static/js/main.6dc68d03.chunk.js","sourcesContent":["import axios from \"axios\";\n\nfunction getApiKey() {\n    if (process.env.NODE_ENV === \"production\") {\n        return process.env.PEXELS_API_KEY;\n    }\n\n    return process.env.REACT_APP_PEXELS_API_KEY;\n}\n\nconst instance = axios.create({\n    baseURL: \"https://api.pexels.com/v1\",\n    headers: { Authorization: getApiKey() },\n});\n\nexport default instance;","import { useRef, useState, useEffect } from \"react\";\n\nconst useIntersectionObserver = () => {\n    const observer = useRef<IntersectionObserver>();\n    const [node, setNode] = useState<HTMLElement>(null);\n\n    useEffect(() => {\n        observer.current = new IntersectionObserver(\n            (entries, server) => {\n                entries.forEach((entry) => {\n                    if (entry.isIntersecting) {\n                        const source = entry.target.getAttribute(\"data-src\");\n                        entry.target.setAttribute(\"src\", source);\n                        observer.current.unobserve(node);\n                    }\n                });\n            },\n            {\n                threshold: [0.25, 0.5, 0.75, 1],\n            }\n        );\n\n\n        if (node) {\n            observer.current.observe(node);\n        }\n\n        return () => observer.current.disconnect();\n    }, [node]);\n\n    return setNode;\n};\n\nexport default useIntersectionObserver;","import React from \"react\";\nimport useIntersectionObserver from \"./useIntersectionObserver\";\n\ninterface ImageBoxProps {\n  photo: Photo;\n}\n\nconst ImageBox: React.FC<ImageBoxProps> = ({ photo }) => {\n  const setNode = useIntersectionObserver();\n\n  return (\n    <div className=\"p-3 rounded-lg\">\n      <img\n        className=\"w-full\"\n        ref={setNode}\n        src=\"https://via.placeholder.com/300.png\"\n        alt={photo.url}\n        data-src={photo.src.tiny}\n      />\n      <p className=\"text-center mt-2 text-sm\">\n        Photo provided by Pexels, taken by{\" \"}\n        <a\n          href={photo.photographer_url}\n          rel=\"nofollow noopener noreferrer\"\n          target=\"_blank\"\n          className=\"text-blue-400 hover:text-blue-600\"\n        >\n          {photo.photographer}\n        </a>\n      </p>\n    </div>\n  );\n};\n\nexport default ImageBox;\n","import React, { useEffect, useReducer } from \"react\";\nimport axios from \"./axios\";\nimport ImageBox from \"./ImageBox\";\n\ntype State = {\n  photos?: Photo[];\n  isLoading: boolean;\n  isErr: boolean;\n};\n\ntype Action = { type: \"success\"; photos: Photo[] } | { type: \"failure\" };\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"success\": {\n      return {\n        ...state,\n        isLoading: false,\n        photos: action.photos,\n      };\n    }\n    case \"failure\": {\n      return {\n        ...state,\n        isLoading: false,\n        isErr: true,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\ninterface SearchResponse {\n  next_page: string;\n  page: number;\n  per_page: number;\n  photos: Photo[];\n  total_results: number;\n}\n\ninterface SearchResponse {\n  next_page: string;\n  page: number;\n  per_page: number;\n  photos: Photo[];\n  total_results: number;\n}\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, {\n    isLoading: true,\n    isErr: false,\n  });\n\n  useEffect(() => {\n    axios\n      .get<SearchResponse>(\"/search?query=Cats&per_page=50\")\n      .then((res) => {\n        dispatch({ type: \"success\", photos: res.data.photos });\n      })\n      .catch((err) => {\n        console.error(\"Fetch error: \", err);\n\n        dispatch({ type: \"failure\" });\n      });\n  }, []);\n\n  const renderPhotos = () =>\n    state.photos.map((photo) => <ImageBox key={photo.id} photo={photo} />);\n\n  return (\n    <div className=\"container p-4 mx-auto\">\n      <header className=\"flex justify-between items-center py-4 flex-col md:flex-row\">\n        <h1 className=\"text-center text-xs md:text-2xl lg:text-4xl\">\n          Lazy Loading Images with the Intersection Observer API\n        </h1>\n        <a\n          className=\"hover:text-blue-500\"\n          href=\"https://github.com/gomorizsolt/react-pexels-wallpapers\"\n          rel=\"nofollow noopener noreferrer\"\n          target=\"_blank\"\n        >\n          GitHub\n        </a>\n      </header>\n      <main>\n        {state.isLoading ? (\n          <p className=\"text-center\">Loading ...</p>\n        ) : (\n          <div className=\"grid grid-cols-2 gap-2\">{renderPhotos()}</div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./tailwind/tailwind.generated.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}